package sorting_algorithms;
//Time Complexity is o(N logN)
//Space complexity is o(N)
public class MergeSortImpl {

	public static void mS(int arr[], int low, int high) {		
		
		// base conditionif (low >= high)
			return;

		int mid = (low + high) / 2;
		mS(arr, low, mid); //call recursion for left sub array
		mS(arr, mid + 1, high); //call recursion for right sub array
		merge(arr, low, mid, high); 
	}// merge the sub arrays}

	public static void merge(int[] arr, int low, int mid, int high) {
		
	}

	static void mergeSort(int arr[], int n) {
		mS(arr, 0, n - 1);
	}
	
	public static void main(String[] args) {
		int arr[]={12,60,34,1,99,88,0,999,111};
		mergeSort(arr,arr.length);
		for(int i=0;i<arr.length;i++){
			System.out.println(arr[i]+"");
		}
	}
}
