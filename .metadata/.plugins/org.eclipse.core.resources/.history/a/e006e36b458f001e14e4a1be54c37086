package Rod_Cutting_Problem;

import java.util.*;

public class RecursiveApproach {
	static int cutRodUntil(int ind, int N,int[] cuts) {
		// Base case: 
		if (ind == 0) {
			return ((int) (N) * cuts[0]);
		}
		int notTaken = 0 + cutRodUntil(ind-1,N,cuts);
		int taken = Integer.MIN_VALUE;
		
		int rodLength = ind+1;
		if (rodLength <= N)
			taken = cuts[ind] + cutRodUntil(ind,N,cuts); //Stay on same index
		
		return  Math.max(notTaken, taken);
	}

	static int minCost(int N, int[] cuts) {
		
		return cutRodUntil(cuts,N);
	}

	public static void main(String args[]) {
		int val[] = { 2,5,7,8,10 };
		int N = 5;


		// Call the unboundedKnapsack function and print the result
		System.out.println("The Maximum value of items, the thief can steal is " + unboundedKnapsack(N, W, val, wt));
	}
}
